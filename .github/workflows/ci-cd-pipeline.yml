name: ArduPilot Firmware CI/CD Pipeline

on:
  push:
    branches: [ main, develop, feature/ci-cd-pipeline ]
  pull_request:
    branches: [ main, develop, feature/ci-cd-pipeline ]
  workflow_dispatch:

env:
  CCACHE_BASEDIR: ${{ github.workspace }}
  CCACHE_DIR: ${{ github.workspace }}/.ccache
  CCACHE_COMPRESS: "true"
  CCACHE_COMPRESSLEVEL: 6
  CCACHE_MAXSIZE: 400M

jobs:
  build-sitl:
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        vehicle: [copter, plane, rover, sub]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
        fetch-depth: 0

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          ccache \
          g++ \
          gawk \
          git \
          make \
          wget \
          libxml2-dev \
          libxslt1-dev \
          python3-dev \
          python3-pip \
          python3-venv \
          libtool-bin \
          autoconf \
          automake \
          realpath \
          libpng-dev

    - name: Setup ccache
      uses: hendrikmuhs/ccache-action@v1.2
      with:
        key: ${{ runner.os }}-ccache-sitl-${{ matrix.vehicle }}

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r Tools/environment_install/requirements.txt
        pip install pymavlink MAVProxy

    - name: Build SITL for ${{ matrix.vehicle }}
      run: |
        export PATH="/usr/lib/ccache:$PATH"
        python waf configure --board=sitl
        python waf ${{ matrix.vehicle }}
      
    - name: Upload SITL binary
      uses: actions/upload-artifact@v3
      with:
        name: sitl-${{ matrix.vehicle }}-binary
        path: |
          build/sitl/bin/ardu${{ matrix.vehicle }}
          build/sitl/bin/ardu${{ matrix.vehicle }}.exe
        retention-days: 30

  build-hardware:
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        board: [Pixhawk1, Pixhawk4, Pixhawk6C, esp32]
        vehicle: [copter, plane, rover]
        exclude:
          # ESP32 doesn't support all vehicles - adjust as needed
          - board: esp32
            vehicle: rover

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
        fetch-depth: 0

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          ccache \
          g++ \
          gawk \
          git \
          make \
          wget \
          python3-dev \
          python3-pip

    - name: Setup ccache
      uses: hendrikmuhs/ccache-action@v1.2
      with:
        key: ${{ runner.os }}-ccache-${{ matrix.board }}-${{ matrix.vehicle }}

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r Tools/environment_install/requirements.txt

    - name: Install ARM toolchain (for Pixhawk boards)
      if: contains(matrix.board, 'Pixhawk')
      run: |
        wget -O gcc-arm-none-eabi.tar.bz2 'https://armkeil.blob.core.windows.net/developer/Files/downloads/gnu-rm/10.3-2021.10/gcc-arm-none-eabi-10.3-2021.10-x86_64-linux.tar.bz2'
        tar -xjf gcc-arm-none-eabi.tar.bz2
        echo "${{ github.workspace }}/gcc-arm-none-eabi-10.3-2021.10/bin" >> $GITHUB_PATH

    - name: Install ESP32 toolchain
      if: matrix.board == 'esp32'
      run: |
        mkdir -p esp-idf
        cd esp-idf
        git clone --recursive https://github.com/espressif/esp-idf.git .
        git checkout v4.4
        ./install.sh

    - name: Build firmware for ${{ matrix.board }} ${{ matrix.vehicle }}
      run: |
        export PATH="/usr/lib/ccache:$PATH"
        if [ "${{ matrix.board }}" == "esp32" ]; then
          source esp-idf/export.sh
        fi
        python waf configure --board=${{ matrix.board }}
        python waf ${{ matrix.vehicle }}

    - name: Upload firmware binary
      uses: actions/upload-artifact@v3
      with:
        name: firmware-${{ matrix.board }}-${{ matrix.vehicle }}
        path: |
          build/${{ matrix.board }}/bin/ardu${{ matrix.vehicle }}*
        retention-days: 30

  run-unit-tests:
    runs-on: ubuntu-22.04
    needs: build-sitl

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential ccache g++ gawk git make wget
        python -m pip install --upgrade pip
        pip install -r Tools/environment_install/requirements.txt

    - name: Run unit tests
      run: |
        python waf configure --board=sitl
        python waf tests

    - name: Upload unit test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: unit-test-results
        path: |
          build/sitl/tests/
        retention-days: 30

  run-sitl-tests:
    runs-on: ubuntu-22.04
    needs: build-sitl
    strategy:
      fail-fast: false
      matrix:
        vehicle: [copter, plane, rover, sub]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          ccache \
          g++ \
          gawk \
          git \
          make \
          wget \
          xvfb \
          fluxbox \
          libxml2-dev \
          libxslt1-dev
        python -m pip install --upgrade pip
        pip install -r Tools/environment_install/requirements.txt
        pip install pymavlink MAVProxy

    - name: Download SITL binary
      uses: actions/download-artifact@v3
      with:
        name: sitl-${{ matrix.vehicle }}-binary
        path: build/sitl/bin/

    - name: Make SITL binary executable
      run: chmod +x build/sitl/bin/ardu${{ matrix.vehicle }}

    - name: Run SITL autotest for ${{ matrix.vehicle }}
      run: |
        export DISPLAY=:99
        Xvfb :99 -screen 0 1024x768x24 &
        fluxbox &
        sleep 5
        cd Tools/autotest
        timeout 3600 python autotest.py --timeout=3000 test.${{ matrix.vehicle }}
      continue-on-error: true

    - name: Upload SITL test logs
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: sitl-logs-${{ matrix.vehicle }}
        path: |
          Tools/autotest/logs/
          /tmp/ArduPilot-${{ matrix.vehicle }}/
        retention-days: 30

  # Custom tests job - disabled for now, will be enabled when custom tests are added
  # run-custom-tests:
  #   runs-on: ubuntu-22.04
  #   needs: build-sitl
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       vehicle: [copter, plane, rover]
  #   steps:
  #     - name: Placeholder for future custom tests
  #       run: echo "Custom tests will be added here later"

  run-replay-tests:
    runs-on: ubuntu-22.04
    needs: build-sitl

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential
        python -m pip install --upgrade pip
        pip install -r Tools/environment_install/requirements.txt
        pip install pymavlink

    - name: Run replay tests
      run: |
        cd Tools/autotest
        # Add your replay test commands here
        echo "Running replay tests..."
        # Example: python replay_tests.py
      continue-on-error: true

    - name: Upload replay test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: replay-test-results
        path: |
          Tools/autotest/replay_logs/
        retention-days: 30


  build-macos:
    runs-on: macos-13
    timeout-minutes: 60
    strategy:
      fail-fast: false
      matrix:
        vehicle: [copter, plane, rover]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    - name: Install dependencies via Homebrew
      run: |
        brew update
        brew install python@3.10 gcc || true
        brew link --overwrite python@3.10 || true
    - name: Install Python dependencies
      run: |
        python3 -m pip install --upgrade pip
        python3 -m pip install wheel setuptools
        python3 -m pip install MAVProxy pymavlink future lxml empy==3.3.4
    - name: Initialize submodules
      run: |
        git submodule sync --recursive
        git submodule update --init --recursive --jobs=4
    - name: Build ${{ matrix.vehicle }} for macOS
      run: |
        export CC=gcc CXX=g++
        python3 waf configure --board sitl --debug
        python3 waf build --target bin/ardu${{ matrix.vehicle }}
    - name: Upload macOS binaries
      uses: actions/upload-artifact@v3
      with:
        name: macos-${{ matrix.vehicle }}-binary
        path: build/sitl/bin/ardu${{ matrix.vehicle }}
        retention-days: 7
  collect-results:
    runs-on: ubuntu-22.04
    needs: [build-sitl, build-hardware, build-macos, run-unit-tests, run-sitl-tests, run-replay-tests]
    if: always()

    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v3

    - name: Generate test report
      run: |
        echo "# ArduPilot CI/CD Test Report" > test-report.md
        echo "## Build Status" >> test-report.md
        echo "- SITL Build: ${{ needs.build-sitl.result }}" >> test-report.md
        echo "- Hardware Build: ${{ needs.build-hardware.result }}" >> test-report.md
        echo "" >> test-report.md
        echo "## Test Results" >> test-report.md
        echo "- Unit Tests: ${{ needs.run-unit-tests.result }}" >> test-report.md
        echo "- SITL Tests: ${{ needs.run-sitl-tests.result }}" >> test-report.md
        echo "- Custom Tests: Will be added later" >> test-report.md
        echo "- Replay Tests: ${{ needs.run-replay-tests.result }}" >> test-report.md
        echo "" >> test-report.md
        echo "Generated on: $(date)" >> test-report.md

    - name: Upload final test report
      uses: actions/upload-artifact@v3
      with:
        name: final-test-report
        path: test-report.md
        retention-days: 90

    - name: Set final job status
      run: |
        if [ "${{ needs.build-sitl.result }}" != "success" ] || 
           [ "${{ needs.build-hardware.result }}" != "success" ] ||
           [ "${{ needs.run-unit-tests.result }}" != "success" ] ||
           [ "${{ needs.run-sitl-tests.result }}" != "success" ]; then
          echo "One or more critical jobs failed"
          exit 1
        fi
        echo "All jobs completed successfully"